#!/bin/bash
# Git Hooks Setup Script for Arduino CI/CD Project
# 
# Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî ÌîÑÎ°úÏ†ùÌä∏Ïóê ÌïÑÏöîÌïú Git hooksÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
# ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨, Ïª§Î∞ã Î©îÏãúÏßÄ Í≤ÄÏ¶ù, ÏûêÎèô ÌÖåÏä§Ìä∏ Îì±ÏùÑ ÏàòÌñâÌï©ÎãàÎã§.

set -e

PROJECT_ROOT=$(git rev-parse --show-toplevel)
HOOKS_DIR="$PROJECT_ROOT/.git/hooks"

echo "üîß Setting up Git hooks for Arduino CI/CD project..."

# Pre-commit hook ÏÉùÏÑ±
cat > "$HOOKS_DIR/pre-commit" << 'EOF'
#!/bin/bash
# Pre-commit hook for Arduino projects

echo "üîç Running pre-commit checks..."

# Check if we're in an Arduino project
if [ ! -f "README.md" ] || ! grep -q "Arduino" README.md; then
    echo "‚ö†Ô∏è  This doesn't appear to be an Arduino project"
fi

# Arduino CLI Í≤ΩÎ°ú ÌôïÏù∏
ARDUINO_CLI=""
if command -v arduino-cli &> /dev/null; then
    ARDUINO_CLI="arduino-cli"
elif [ -f "/usr/local/bin/arduino-cli" ]; then
    ARDUINO_CLI="/usr/local/bin/arduino-cli"
else
    echo "‚ö†Ô∏è  Arduino CLI not found, skipping compilation check"
fi

# 1. Arduino Ïä§ÏºÄÏπò Ïª¥ÌååÏùº Í≤ÄÏÇ¨
if [ -n "$ARDUINO_CLI" ]; then
    echo "üî® Checking Arduino compilation..."
    
    # Find .ino files in the commit
    INO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.ino$' || true)
    
    if [ -n "$INO_FILES" ]; then
        for ino_file in $INO_FILES; do
            ino_dir=$(dirname "$ino_file")
            echo "Checking compilation for: $ino_file"
            
            # Try different board types
            BOARDS=("arduino:avr:uno" "esp32:esp32:esp32" "esp8266:esp8266:nodemcuv2")
            COMPILED=false
            
            for board in "${BOARDS[@]}"; do
                if $ARDUINO_CLI compile --verify --fqbn "$board" "$ino_dir" >/dev/null 2>&1; then
                    echo "‚úÖ $ino_file compiles successfully for $board"
                    COMPILED=true
                    break
                fi
            done
            
            if [ "$COMPILED" = false ]; then
                echo "‚ùå $ino_file failed to compile for any supported board"
                echo "Please fix compilation errors before committing"
                exit 1
            fi
        done
    fi
fi

# 2. Ïª§Î∞ã Î©îÏãúÏßÄ ÌòïÏãù Í≤ÄÏÇ¨
echo "üìù Checking commit message format..."

# Read commit message from file
COMMIT_MSG_FILE="$1"
if [ -z "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
fi

if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(head -1 "$COMMIT_MSG_FILE")
    
    # Check format: type(scope): description [AIP-XXX]
    COMMIT_REGEX='^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ \[AIP-[0-9]+\]$|^Merge '
    
    if [[ ! $COMMIT_MSG =~ $COMMIT_REGEX ]]; then
        echo "‚ùå Invalid commit message format"
        echo "Expected: type(scope): description [AIP-XXX]"
        echo "Examples:"
        echo "  feat(sensor): add DHT22 temperature reading [AIP-123]"
        echo "  fix(wifi): resolve connection timeout issue [AIP-456]"
        echo "  docs: update README with installation guide [AIP-789]"
        echo ""
        echo "Current message: $COMMIT_MSG"
        exit 1
    fi
fi

# 3. ÏΩîÎìú Ïä§ÌÉÄÏùº Í≤ÄÏÇ¨
echo "üé® Checking code style..."

# Check for tabs vs spaces in Arduino files
ARDUINO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ino|cpp|h)$' || true)

if [ -n "$ARDUINO_FILES" ]; then
    for file in $ARDUINO_FILES; do
        if [ -f "$file" ]; then
            # Check for tabs (prefer 4 spaces)
            if grep -q $'\t' "$file"; then
                echo "‚ö†Ô∏è  Warning: Found tabs in $file, prefer 4 spaces"
            fi
            
            # Check for trailing whitespace
            if grep -q ' $' "$file"; then
                echo "‚ö†Ô∏è  Warning: Found trailing whitespace in $file"
            fi
            
            # Check for long lines (>120 characters)
            if awk 'length > 120 {print NR ": " $0; exit 1}' "$file"; then
                echo "‚ö†Ô∏è  Warning: Found lines longer than 120 characters in $file"
            fi
        fi
    done
fi

# 4. Î≥¥Ïïà Í≤ÄÏÇ¨
echo "üîí Running security checks..."

# Check for hardcoded credentials
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Check for potential secrets
        if grep -i -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}" "$file" >/dev/null; then
            echo "‚ùå Potential hardcoded credentials found in $file"
            echo "Please remove sensitive data before committing"
            exit 1
        fi
        
        # Check for common secret patterns
        if grep -E "(api[_-]?key|access[_-]?token|secret[_-]?key)" "$file" >/dev/null; then
            echo "‚ö†Ô∏è  Warning: Potential API keys or secrets found in $file"
            echo "Please verify no sensitive data is being committed"
        fi
    fi
done

# 5. TODO/FIXME Í≤ÄÏÇ¨
echo "üìã Checking for TODO/FIXME comments..."

TODO_COUNT=$(git diff --cached | grep -c -E "TODO|FIXME|XXX|HACK" || true)
if [ "$TODO_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments in staged changes"
    echo "Consider resolving these before committing to main branch"
    
    # Block TODOs on main branch
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
        echo "‚ùå TODO/FIXME comments are not allowed on main branch"
        exit 1
    fi
fi

# 6. ÌååÏùº ÌÅ¨Í∏∞ Í≤ÄÏÇ¨
echo "üìè Checking file sizes..."

LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs -I {} sh -c 'test -f "{}" && test $(wc -c < "{}") -gt 1048576 && echo "{}"' || true)

if [ -n "$LARGE_FILES" ]; then
    echo "‚ùå Large files (>1MB) detected:"
    echo "$LARGE_FILES"
    echo "Consider using Git LFS for large binary files"
    exit 1
fi

# 7. ÎùºÏù¥ÏÑ†Ïä§ Ìó§Îçî Í≤ÄÏÇ¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
echo "‚öñÔ∏è  Checking license headers..."

CPP_FILES=$(git diff --cached --name-only --diff-filter=A | grep -E '\.(cpp|h)$' || true)
for file in $CPP_FILES; do
    if [ -f "$file" ] && ! head -10 "$file" | grep -q -i "license\|copyright"; then
        echo "‚ö†Ô∏è  Warning: $file might be missing license header"
    fi
done

echo "‚úÖ All pre-commit checks passed!"
EOF

# Pre-push hook ÏÉùÏÑ±
cat > "$HOOKS_DIR/pre-push" << 'EOF'
#!/bin/bash
# Pre-push hook for Arduino projects

echo "üöÄ Running pre-push checks..."

# ÌòÑÏû¨ Î∏åÎûúÏπò ÌôïÏù∏
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "Pushing branch: $CURRENT_BRANCH"

# main Î∏åÎûúÏπòÎ°ú Ìë∏ÏãúÌïòÎäî Í≤ΩÏö∞ Ï∂îÍ∞Ä Í≤ÄÏÇ¨
if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    echo "üõ°Ô∏è  Extra checks for main branch..."
    
    # ÎπåÎìú ÌÖåÏä§Ìä∏ Ïã§Ìñâ (Arduino CLIÍ∞Ä ÏûàÎäî Í≤ΩÏö∞)
    if command -v arduino-cli &> /dev/null; then
        echo "üî® Running build test..."
        
        # Find Arduino sketches
        SKETCHES=$(find . -name "*.ino" -not -path "./.git/*")
        
        for sketch in $SKETCHES; do
            sketch_dir=$(dirname "$sketch")
            echo "Testing build for: $sketch"
            
            if ! arduino-cli compile --verify --fqbn arduino:avr:uno "$sketch_dir" >/dev/null 2>&1; then
                echo "‚ùå Build test failed for $sketch"
                echo "Cannot push to main branch with broken builds"
                exit 1
            fi
        done
        
        echo "‚úÖ Build tests passed"
    fi
    
    # Îã®ÏúÑ ÌÖåÏä§Ìä∏ Ïã§Ìñâ (ÏûàÎäî Í≤ΩÏö∞)
    if [ -f "scripts/run-tests.sh" ]; then
        echo "üß™ Running unit tests..."
        if ! bash scripts/run-tests.sh; then
            echo "‚ùå Unit tests failed"
            echo "Cannot push to main branch with failing tests"
            exit 1
        fi
        echo "‚úÖ Unit tests passed"
    fi
fi

# ÏõêÍ≤© Î∏åÎûúÏπòÏôÄ ÎèôÍ∏∞Ìôî ÌôïÏù∏
echo "üîÑ Checking if branch is up to date..."

git fetch origin >/dev/null 2>&1 || true

if git rev-list HEAD..origin/$CURRENT_BRANCH >/dev/null 2>&1; then
    BEHIND_COUNT=$(git rev-list --count HEAD..origin/$CURRENT_BRANCH 2>/dev/null || echo "0")
    if [ "$BEHIND_COUNT" -gt 0 ]; then
        echo "‚ö†Ô∏è  Your branch is $BEHIND_COUNT commits behind origin/$CURRENT_BRANCH"
        echo "Consider pulling latest changes before pushing"
    fi
fi

echo "‚úÖ Pre-push checks completed!"
EOF

# Commit-msg hook ÏÉùÏÑ±
cat > "$HOOKS_DIR/commit-msg" << 'EOF'
#!/bin/bash
# Commit message hook for Arduino projects

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

echo "üìù Validating commit message..."

# Ïª§Î∞ã Î©îÏãúÏßÄ Í∏∏Ïù¥ Í≤ÄÏÇ¨
FIRST_LINE=$(head -1 "$COMMIT_MSG_FILE")
if [ ${#FIRST_LINE} -gt 72 ]; then
    echo "‚ùå Commit message first line too long (${#FIRST_LINE} chars, max 72)"
    echo "Please shorten your commit message"
    exit 1
fi

# Ïª§Î∞ã Î©îÏãúÏßÄ ÌòïÏãù Í≤ÄÏÇ¨
COMMIT_REGEX='^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ \[AIP-[0-9]+\]$|^Merge |^Revert '

if [[ ! $FIRST_LINE =~ $COMMIT_REGEX ]]; then
    echo "‚ùå Invalid commit message format"
    echo ""
    echo "Format: type(scope): description [AIP-XXX]"
    echo ""
    echo "Types:"
    echo "  feat:     ÏÉàÎ°úÏö¥ Í∏∞Îä•"
    echo "  fix:      Î≤ÑÍ∑∏ ÏàòÏ†ï"
    echo "  docs:     Î¨∏ÏÑú Î≥ÄÍ≤Ω"
    echo "  style:    ÏΩîÎìú Ìè¨Îß∑ÌåÖ (Í∏∞Îä• Î≥ÄÍ≤Ω ÏóÜÏùå)"
    echo "  refactor: Î¶¨Ìå©ÌÜ†ÎßÅ"
    echo "  test:     ÌÖåÏä§Ìä∏ Ï∂îÍ∞Ä ÎòêÎäî ÏàòÏ†ï"
    echo "  chore:    ÎπåÎìú ÌîÑÎ°úÏÑ∏Ïä§ÎÇò ÎèÑÍµ¨ Î≥ÄÍ≤Ω"
    echo ""
    echo "Examples:"
    echo "  feat(sensor): add DHT22 temperature reading [AIP-123]"
    echo "  fix(wifi): resolve connection timeout issue [AIP-456]"
    echo "  docs: update README with setup instructions [AIP-789]"
    echo ""
    echo "Your message: $FIRST_LINE"
    exit 1
fi

# Jira Ïù¥Ïäà Î≤àÌò∏ Ï∂îÏ∂ú Î∞è Í≤ÄÏ¶ù
JIRA_ISSUE=$(echo "$FIRST_LINE" | grep -o '\[AIP-[0-9]\+\]' | tr -d '[]')

if [ -n "$JIRA_ISSUE" ]; then
    echo "‚úÖ Linked to Jira issue: $JIRA_ISSUE"
fi

echo "‚úÖ Commit message format is valid"
EOF

# Post-commit hook ÏÉùÏÑ± (ÏÑ†ÌÉùÏÇ¨Ìï≠)
cat > "$HOOKS_DIR/post-commit" << 'EOF'
#!/bin/bash
# Post-commit hook for Arduino projects

COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_MSG=$(git log -1 --pretty=%B)
BRANCH=$(git rev-parse --abbrev-ref HEAD)

echo "üìù Post-commit actions for $COMMIT_HASH"

# Jira Ïù¥Ïäà Î≤àÌò∏ Ï∂îÏ∂ú
JIRA_ISSUE=$(echo "$COMMIT_MSG" | grep -o '\[AIP-[0-9]\+\]' | tr -d '[]')

if [ -n "$JIRA_ISSUE" ]; then
    echo "üîó Linked to Jira issue: $JIRA_ISSUE"
    
    # TODO: Jira API Ìò∏Ï∂úÎ°ú Ïù¥Ïäà ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    # curl -X POST "https://your-jira.atlassian.net/rest/api/2/issue/$JIRA_ISSUE/comment" \
    #      -H "Content-Type: application/json" \
    #      -d "{\"body\": \"Commit: $COMMIT_HASH on branch $BRANCH\"}"
fi

# ÎπåÎìú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Î°úÏª¨ ÎπåÎìú Î°úÍ∑∏)
echo "$(date): $COMMIT_HASH - $COMMIT_MSG" >> .git/build-log.txt

echo "‚úÖ Post-commit actions completed"
EOF

# Î™®Îì† hook ÌååÏùºÏùÑ Ïã§Ìñâ Í∞ÄÎä•ÌïòÍ≤å ÎßåÎì§Í∏∞
chmod +x "$HOOKS_DIR/pre-commit"
chmod +x "$HOOKS_DIR/pre-push"
chmod +x "$HOOKS_DIR/commit-msg"
chmod +x "$HOOKS_DIR/post-commit"

echo "‚úÖ Git hooks installed successfully!"
echo ""
echo "üìã Installed hooks:"
echo "  - pre-commit:  ÏΩîÎìú ÌíàÏßà, Î≥¥Ïïà, Ïª¥ÌååÏùº Í≤ÄÏÇ¨"
echo "  - pre-push:    ÎπåÎìú ÌÖåÏä§Ìä∏ Î∞è ÎèôÍ∏∞Ìôî ÌôïÏù∏"
echo "  - commit-msg:  Ïª§Î∞ã Î©îÏãúÏßÄ ÌòïÏãù Í≤ÄÏ¶ù"
echo "  - post-commit: Ïù¥Ïäà ÎßÅÌÅ¨ Î∞è Î°úÍπÖ"
echo ""
echo "üéØ Next steps:"
echo "  1. Test the hooks by making a commit"
echo "  2. Ensure Arduino CLI is installed for compilation checks"
echo "  3. Configure Jira integration if needed"
echo ""
echo "‚ÑπÔ∏è  To disable hooks temporarily: git commit --no-verify"
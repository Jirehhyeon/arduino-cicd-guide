# üöÄ Kubernetes Í∏∞Î∞ò IoT ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò
# Ï∞®ÏÑ∏ÎåÄ ÌôïÏû• Í∞ÄÎä•Ìïú Arduino DevOps Ïù∏ÌîÑÎùº

apiVersion: v1
kind: Namespace
metadata:
  name: arduino-devops-ecosystem
  labels:
    app.kubernetes.io/name: arduino-devops
    app.kubernetes.io/version: "2.0.0"
    environment: production

---
# üß† AI ÏΩîÎìú ÏÉùÏÑ± ÏÑúÎπÑÏä§
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-code-generator
  namespace: arduino-devops-ecosystem
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ai-code-generator
  template:
    metadata:
      labels:
        app: ai-code-generator
        version: v2.0
    spec:
      containers:
      - name: ai-generator
        image: arduino-devops/ai-code-generator:2.0.0
        ports:
        - containerPort: 8080
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-secrets
              key: openai-api-key
        - name: REDIS_URL
          value: redis://redis-cluster:6379
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# üìä Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ (Apache Kafka)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-cluster
  namespace: arduino-devops-ecosystem
spec:
  serviceName: kafka-headless
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
        - containerPort: 9093
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://$(POD_NAME).kafka-headless:9092,EXTERNAL://$(POD_IP):9093"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_DELETE_TOPIC_ENABLE
          value: "true"
        volumeMounts:
        - name: kafka-storage
          mountPath: /var/lib/kafka/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
  volumeClaimTemplates:
  - metadata:
      name: kafka-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# üîÆ Digital Twin ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏÑúÎπÑÏä§
apiVersion: apps/v1
kind: Deployment
metadata:
  name: digital-twin-simulator
  namespace: arduino-devops-ecosystem
spec:
  replicas: 2
  selector:
    matchLabels:
      app: digital-twin-simulator
  template:
    metadata:
      labels:
        app: digital-twin-simulator
    spec:
      containers:
      - name: unity-simulation
        image: arduino-devops/unity-digital-twin:2.0.0
        ports:
        - containerPort: 7777  # Unity Netcode
        - containerPort: 8081  # Web Interface
        env:
        - name: SIMULATION_MODE
          value: "cloud"
        - name: PHYSICS_QUALITY
          value: "high"
        - name: ML_AGENTS_PORT
          value: "5005"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: simulation-data
          mountPath: /app/simulation-data
      - name: ml-agents-trainer
        image: arduino-devops/ml-agents:2.0.0
        ports:
        - containerPort: 5005
        env:
        - name: TRAINING_MODE
          value: "online"
        - name: MODEL_CHECKPOINT_INTERVAL
          value: "1000"
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "16Gi"
            cpu: "8000m"
      volumes:
      - name: simulation-data
        persistentVolumeClaim:
          claimName: simulation-data-pvc

---
# üõ°Ô∏è Î∏îÎ°ùÏ≤¥Ïù∏ Í∏∞Î∞ò Î≥¥Ïïà ÏÑúÎπÑÏä§
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-security
  namespace: arduino-devops-ecosystem
spec:
  replicas: 3
  selector:
    matchLabels:
      app: blockchain-security
  template:
    metadata:
      labels:
        app: blockchain-security
    spec:
      containers:
      - name: ethereum-node
        image: ethereum/client-go:v1.13.5
        ports:
        - containerPort: 8545  # JSON-RPC
        - containerPort: 8546  # WebSocket
        - containerPort: 30303 # P2P
        command:
        - geth
        - --http
        - --http.addr=0.0.0.0
        - --http.port=8545
        - --http.corsdomain=*
        - --ws
        - --ws.addr=0.0.0.0
        - --ws.port=8546
        - --ws.origins=*
        - --datadir=/data
        - --networkid=1337
        - --dev
        - --dev.period=1
        volumeMounts:
        - name: blockchain-data
          mountPath: /data
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
      - name: smart-contract-deployer
        image: arduino-devops/smart-contracts:2.0.0
        env:
        - name: ETH_RPC_URL
          value: "http://localhost:8545"
        - name: DEPLOY_ON_STARTUP
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: blockchain-data
        persistentVolumeClaim:
          claimName: blockchain-data-pvc

---
# üåê GraphQL API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql-gateway
  namespace: arduino-devops-ecosystem
spec:
  replicas: 2
  selector:
    matchLabels:
      app: graphql-gateway
  template:
    metadata:
      labels:
        app: graphql-gateway
    spec:
      containers:
      - name: apollo-gateway
        image: arduino-devops/apollo-gateway:2.0.0
        ports:
        - containerPort: 4000
        env:
        - name: SERVICES_CONFIG
          value: |
            {
              "ai-generator": "http://ai-code-generator:8080/graphql",
              "device-manager": "http://device-manager:8080/graphql",
              "monitoring": "http://monitoring-service:8080/graphql",
              "blockchain": "http://blockchain-security:8080/graphql"
            }
        - name: ENABLE_SUBSCRIPTIONS
          value: "true"
        - name: ENABLE_TRACING
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
# üì± Î™®Î∞îÏùº Ïï± Î∞±ÏóîÎìú
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mobile-backend
  namespace: arduino-devops-ecosystem
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mobile-backend
  template:
    metadata:
      labels:
        app: mobile-backend
    spec:
      containers:
      - name: mobile-api
        image: arduino-devops/mobile-backend:2.0.0
        ports:
        - containerPort: 8080
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-url
        - name: PUSH_NOTIFICATION_KEY
          valueFrom:
            secretKeyRef:
              name: mobile-secrets
              key: fcm-key
        - name: ENABLE_AR_FEATURES
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# üîß Jenkins X ÌååÏù¥ÌîÑÎùºÏù∏ Ïª®Ìä∏Î°§Îü¨
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkinsx-controller
  namespace: arduino-devops-ecosystem
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkinsx-controller
  template:
    metadata:
      labels:
        app: jenkinsx-controller
    spec:
      serviceAccountName: jenkinsx-controller
      containers:
      - name: jenkinsx
        image: jenkins/jenkins-x:3.2.0
        ports:
        - containerPort: 8080
        - containerPort: 50000
        env:
        - name: JENKINS_OPTS
          value: "--httpPort=8080"
        - name: KUBERNETES_NAMESPACE
          value: arduino-devops-ecosystem
        - name: ENABLE_AI_PIPELINES
          value: "true"
        volumeMounts:
        - name: jenkins-home
          mountPath: /var/jenkins_home
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins-home-pvc

---
# üîç Observability Stack (Prometheus + Grafana + Jaeger)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: observability-stack
  namespace: arduino-devops-ecosystem
spec:
  replicas: 1
  selector:
    matchLabels:
      app: observability-stack
  template:
    metadata:
      labels:
        app: observability-stack
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_FEATURE_TOGGLES_ENABLE
          value: "ngalert"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      - name: jaeger
        image: jaegertracing/all-in-one:1.47
        ports:
        - containerPort: 16686  # UI
        - containerPort: 14268  # HTTP
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc

---
# üåç Service Mesh (Istio)
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: arduino-devops-routing
  namespace: arduino-devops-ecosystem
spec:
  hosts:
  - arduino-devops.local
  gateways:
  - arduino-devops-gateway
  http:
  - match:
    - uri:
        prefix: /api/ai
    route:
    - destination:
        host: ai-code-generator
        port:
          number: 8080
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5s
    retries:
      attempts: 3
      perTryTimeout: 2s
  - match:
    - uri:
        prefix: /api/mobile
    route:
    - destination:
        host: mobile-backend
        port:
          number: 8080
    headers:
      request:
        add:
          x-request-id: "%REQ(x-request-id)%"
  - match:
    - uri:
        prefix: /graphql
    route:
    - destination:
        host: graphql-gateway
        port:
          number: 4000
    corsPolicy:
      allowOrigins:
      - exact: https://arduino-devops.com
      - regex: ".*\\.arduino-devops\\.com"
      allowMethods:
      - GET
      - POST
      - OPTIONS
      allowHeaders:
      - content-type
      - authorization

---
# üéØ Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-code-generator-hpa
  namespace: arduino-devops-ecosystem
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-code-generator
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# üîí ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÏ±Ö (Î≥¥Ïïà)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: arduino-devops-security-policy
  namespace: arduino-devops-ecosystem
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from: []
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 4000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: arduino-devops-ecosystem
    ports:
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9092  # Kafka